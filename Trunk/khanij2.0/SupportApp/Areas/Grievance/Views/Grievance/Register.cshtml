@*// *********************************************************************************************************
    //  View Name                : Register
    //  Desciption               : Add users Grievance
    //  Created By               : Debaraj Swain
    //  Created On               : 10 May 2021
    // ********************************************************************************************************
*@
@using SupportApp.Web;
@model SupportEF.PublicGrievanceModel
@{
    ViewData["Title"] = "ProfileView";
    Layout = "~/Views/Shared/_CMSLayout.cshtml";
}
@if (!String.IsNullOrEmpty(ViewBag.ResponseMessage))
{
    <script>
            swal("", "@ViewBag.ResponseMessage", "success");
    </script>
}
<script type="text/javascript">
    function numericOnly() {
        debugger;
        var keycode = event.which;
        if (!(event.shiftKey == false && (keycode == 8 || keycode == 37 || keycode == 39 || (keycode >= 48 && keycode <= 57)))) {
            event.preventDefault();
            return false;
        }
    }
    var specialKeys = new Array();
    specialKeys.push(8); //Backspace
    function numericdotOnly(elementRef) {
        var keyCodeEntered = (event.which) ? event.which : (window.event.keyCode) ? window.event.keyCode : -1;
        if ((keyCodeEntered >= 48) && (keyCodeEntered <= 57)) {
            return true;
        }
        // '.' decimal point...
        else if (keyCodeEntered == 46) {
            // Allow only 1 decimal point ('.')...
            if ((elementRef.value) && (elementRef.value.indexOf('.') >= 0))
                return false;
            else
                return true;
        }
        return false;
    }
    function lettersOnly() {
        var regex = new RegExp("^[a-zA-Z ]+$");
        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
        if (!regex.test(key)) {
            event.preventDefault();
            return false;
        }
    }

</script>
<section class="wrapper main-wrapper row">
    <div class="col-12">
        <!-- MAIN CONTENT AREA STARTS -->
        @Html.Partial("_CMSnavigation")
        <div class="row">
            <div class="col-12">
                <div class="main-tab">
                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <a class="nav-link active" href="@Url.Action("Register", "Grievance")">
                                Add New Request
                            </a>
                        </li>
                    </ul>
                    @Html.Partial("_CMSutil")
                </div>
                <section class="box form-container">
                    <div class="content-body">
                        @using (Html.BeginForm("Register", "Grievance", FormMethod.Post, new { AUTOCOMPLETE = "Off", id = "__EUAntiForgeryForm", @enctype = "multipart/form-data", @class = "form-horizontal bordered-row" }))
                        {
                            <div class="row">
                                <div class="col-sm-12">
                                    <div class="form-group row">
                                        <h4 style="color:red">1) Details of the complainer</h4>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label">User Code of Complainer</label>
                                        <div class="col-sm-7">

                                            @Html.TextBoxFor(x => x.USER_CODE_OF_COMPLAINER, new { @class = "form-control", @maxlength = "50" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label">Name of Complainer  <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextBoxFor(x => x.NAME_OF_COMPLAINER, new { @class = "form-control", @maxlength = "150", onkeypress = "lettersOnly();" })
                                            @Html.ValidationMessageFor(x => x.NAME_OF_COMPLAINER, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="inputLoginId" class="col-sm-4 col-form-label">State <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">

                                            @Html.DropDownListFor(model => model.STATE, ViewBag.ViewStatelst as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control searchableselect", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(x => x.STATE, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label">Mobile Number of Complainer <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextBoxFor(x => x.MOBILE_NUMBER_OF_COMPLAINER, new { @maxlength = "10", @class = "form-control", @minlength = "10", onkeypress = "numericOnly();" })
                                            @Html.ValidationMessageFor(x => x.MOBILE_NUMBER_OF_COMPLAINER, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="inputLoginId" class="col-sm-4 col-form-label">District <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">

                                            @Html.DropDownListFor(model => model.DISTRICT, ViewBag.ViewDistList as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control searchableselect", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(x => x.DISTRICT, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Complete Address <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextAreaFor(x => x.COMPLETE_ADDRESS, new { @class = "form-control", @maxlength = "500", style = "resize:none;", @rows = 3 })
                                            @Html.ValidationMessageFor(x => x.COMPLETE_ADDRESS, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Pincode <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextBoxFor(x => x.PINCODE, new { @maxlength = "6", @class = "form-control", @minlength = "6", onkeypress = "numericOnly();" })
                                            @Html.ValidationMessageFor(x => x.PINCODE, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label">Email-Id of Complainer  <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextBoxFor(x => x.EMAIL_ADDRESS_OF_COMPLAINER, new { @class = "form-control", @maxlength = "255" })
                                            @Html.ValidationMessageFor(x => x.EMAIL_ADDRESS_OF_COMPLAINER, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-12">
                                    <div class="form-group row">
                                        <h4 style="color:red">2) Details of Complain</h4>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="inputLoginId" class="col-sm-4 col-form-label">Subject of Complaint  <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.DropDownListFor(model => model.SUBJECT_OF_COMPLAINT, ViewBag.ViewCType as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control searchableselect", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(x => x.SUBJECT_OF_COMPLAINT, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Complaint In Brief <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextAreaFor(x => x.COMPLAINT_IN_BRIEF, new { @class = "form-control", @maxlength = "500" })
                                            @Html.ValidationMessageFor(x => x.COMPLAINT_IN_BRIEF, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Complain related to Person / Area / Vehicle No. <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextAreaFor(x => x.ADDRESS, new { @class = "form-control", @maxlength = "500" })
                                            @Html.ValidationMessageFor(x => x.ADDRESS, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="inputLoginId" class="col-sm-4 col-form-label">Complaint to District<span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.DropDownListFor(model => model.C_DISTRICT, ViewBag.ViewDistList as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control searchableselect", autofocus = "autofocus" })
                                            @Html.ValidationMessageFor(x => x.C_DISTRICT, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Action Required  <span class="text-danger">*</span></label>
                                        <div class="col-sm-7">
                                            @Html.TextBoxFor(x => x.Action_Against, new { @class = "form-control", @maxlength = "200" })
                                            @Html.ValidationMessageFor(x => x.Action_Against, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group row">
                                        <label for="dropdownDepart" class="col-sm-4 col-form-label"> Attachment </label>
                                        <div class="col-sm-7">
                                            @if (Model.ATTACHMENT_FILE_NAME != null && Model.ATTACHMENT_FILE_NAME != "")
                                            {
                                                @*<a href="@Url.Action("DownloadFiles", "Grievance", new { filename = Model.ATTACHMENT_FILE_NAME, foldername = "Register" })">*@
                                                    <a href="@CustomQueryStringHelper.EncryptString("Grievance","DownloadFiles","Grievance",new {filename=Model.ATTACHMENT_FILE_NAME,foldername = "Register" })">
                                                        <i class="icon-download-solid" aria-hidden="true"></i>
                                                    </a>
                                                    }

                                                    else
                                                    {
                                                    @if (Model.SUBJECT_OF_COMPLAINT != null && Model.COMPLAINT_IN_BRIEF != "")
                                                    {
                                                        <a href="#">
                                                            No Files Found
                                                        </a>
                                                    }
                                                    else
                                                    {

                                                        <input name="ATTACHMENT" type="file" class="form-control custom-file-input" id="ATTACHMENT">
                                                        <label class="custom-file-label">Choose Files</label>
                                                        <small class="text-danger">Only <strong> jpg, jpeg, png, pdf, tif</strong> file types with size less than <strong>2 MB </strong> are allowed.</small>
                                                    }

                                                    }
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                    </div>
                                    <div class="col-sm-6">

                                    </div>
                                    <div class="col-sm-6 offset-sm-2">
                                        @if (Model.SUBJECT_OF_COMPLAINT != null && Model.COMPLAINT_IN_BRIEF != "")
                                        {

                                        }
                                        else
                                        {
                                            <input type="button" value="Send" id="btnSubmit" onclick="return btnSubmitClick();" class="btn btn-primary btn-md" style="margin-right: 10px;" />
                                            <a href="~/Grievance/Grievance/Register" class="btn btn-danger btn-md">Clear</a>
                                        }
                                    </div>
                                </div>

                            }
                                        </div>
                                    </section>
                                </div>
                                <div>
                                </div>
                            </div>
                        </div>
                    </section>
                    <script>
                        $(document).ready(function () {
                            $('#ATTACHMENT').on("change", function () {
                                debugger;
                                var label = $(this).siblings('.custom-file-label');
                                var files = $(this)[0].files;
                                var Size = files[0].size;
                                if (Size < 2048000) {
                                    label.html(files[0].name);
                                    Aadhaar_FileSize = files.length;
                                }
                                else {
                                    swal("", "Please make sure your Doc is less than 2 MB!", "warning");
                                    $('#doc').focus();
                                }
                            });
                        });
                    </script>
                    <script>
    $("#MOBILE_NUMBER_OF_COMPLAINER").focusout(function () {
        $('#VerifyOTP').val('');
    });
    $("#EMAIL_ADDRESS_OF_COMPLAINER").focusout(function () {
        $('#VerifyOTP').val('');
    });



    $("#MOBILE_NUMBER_OF_COMPLAINER").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });

    $("#MOBILE_NUMBER").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }

    });

    $("#PINCODE").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });

    $("#btnsendOtp").click(function () {
        if (ValidateForm()) {
            var mobileNumber = $("#MOBILE_NUMBER_OF_COMPLAINER").val();
            var EmailID = $("#EMAIL_ADDRESS_OF_COMPLAINER").val();
            $.ajax({
                url: '@Url.Content("~/Grievance/Grievance/SendOTP")',
                dataType: "",
                type: "POST",
                data: {
                    MobileNumber: mobileNumber,
                    EmailID: EmailID
                },
                success: function (data) {
                    console.log(data);
                    if (data != null) {

                        if (data == "SUCCESS") {
                            swal("", "Enter Verification Code received on submitted Mobile/Email Id", "success");
                        }
                        else {
                            alert(data);
                        }
                    }
                }
            })
        }
    });


      function btnSubmitClick() {
          if (ValidateForm()) {
              $("#__EUAntiForgeryForm").submit();
              return true;
          }
          else {
              return false;
          }
    };

    function isEmail(email) {
        var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        return regex.test(email);
    }

    $("#MOBILE_NUMBER_OF_COMPLAINER").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });

    function ValidateForm() {
        if (!blankFieldValidation("NAME_OF_COMPLAINER", "complainer's Name")) {
            return false;
        }


        if (!blankFieldValidation("EMAIL_ADDRESS_OF_COMPLAINER", "email address of complainer")) {
            return false;
        }
        else {

            if (isEmail($("#EMAIL_ADDRESS_OF_COMPLAINER").val()) == false) {
                swal("", "Please enter proper email id of complainer", "warning");
                $("#Email").focus();
                return false;
            }
        }
        if (!blankFieldValidation("MOBILE_NUMBER_OF_COMPLAINER", "mobile number of complainer")) {
            return false;
        }
        if ($("#MOBILE_NUMBER_OF_COMPLAINER").val() != "") {
            if ($("#MOBILE_NUMBER_OF_COMPLAINER").val().length != 10) {
                swal("", "Please enter valid mobile number", "warning");
                $("#MOBILE_NUMBER_OF_COMPLAINER").focus();
                return false;
            }
        }

        if (!blankFieldValidation("DISTRICT", "district")) {
            return false;
        }

        if (!blankFieldValidation("COMPLETE_ADDRESS", "Complete Address")) {
            return false;
        }

        if (!blankFieldValidation("PINCODE", "PINCODE")) {
            return false;
        }
        if ($("#PINCODE").val() != "") {
            if ($("#PINCODE").val().length != 6) {
                swal("", "Please enter Valid pincode", "warning");
                $("#PINCODE").focus();
                return false;
            }

        }

        if (!blankFieldValidation("SUBJECT_OF_COMPLAINT", "SUBJECT OF COMPLAINT")) {
            return false;
        }


        if (!blankFieldValidation("COMPLAINT_IN_BRIEF", "COMPLAINT IN BRIEF")) {
            return false;
        }


        if (!blankFieldValidation("ADDRESS", "ADDRESS")) {
            return false;
        }

        if (!blankFieldValidation("C_DISTRICT", "Complaint DISTRICT")) {
            return false;
        }

        if (!blankFieldValidation("Action_Against", "Action Against")) {
            return false;
        }
        return true;
    }
                    </script>
                    <script>
                        indicateMe = "yes"
                        backMe="yes"
                        $(document).ready(function () {
                            loadNavigation('AddMineralForm', 'glTMng', 'plmineralform', 'tl', 'Grievance', 'Register', '');
                            $('.searchableselect').searchableselect();
                        });
                    </script>











