@model PermitEF.ePermitModel
@{
    ViewData["Title"] = "ePermitApplication";
    Layout = "~/Views/Shared/_CMSLayout.cshtml";
}


<section class="wrapper main-wrapper row">
    <div class="col-12">
        @Html.Partial("_CMSnavigation")

        <!-- MAIN CONTENT AREA STARTS -->
        <div class="row">
            <div class="col-12">
                <div class="main-tab">
                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <a class="nav-link active" href="javascript:void(0);">
                                Apply e-permit
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Content("~/Permit/lessee/ePermitList")">
                                Saved Permit
                            </a>
                        </li>
                    </ul>
                    @Html.Partial("_CMSutil")
                </div>

                <section class="box form-container">
                    <div class="content-body">
                        @using (Html.BeginForm("AddBulkPermitData", "Lessee", FormMethod.Post, new { enctype = "multipart/form-data", AUTOCOMPLETE = "Off", id = "__EUAntiForgeryForm", @Area = "Permit" }))
                        {
                            @Html.AntiForgeryToken()

                            @(Html.HiddenFor(model => model.BulkPermitId))
                            @(Html.HiddenFor(model => model.TransactionalID))
                            @(Html.HiddenFor(model => model.EmailId))
                            @(Html.HiddenFor(model => model.MobileNo))
                            @(Html.HiddenFor(model => model.PayableRoyalty))
                            @(Html.HiddenFor(model => model.NMET))
                            @(Html.HiddenFor(model => model.TCS))
                            @(Html.HiddenFor(model => model.DMF))
                            @(Html.HiddenFor(model => model.Cess))
                            @(Html.HiddenFor(model => model.eCess))
                            @(Html.HiddenFor(model => model.NMETPer))
                            @(Html.HiddenFor(model => model.TCSPer))
                            @(Html.HiddenFor(model => model.DMFPer))
                            @(Html.HiddenFor(model => model.CessPer))
                            @(Html.HiddenFor(model => model.eCessPer))
                            @(Html.HiddenFor(model => model.PayableRoyaltyBase))
                            @(Html.HiddenFor(model => model.Production))
                            @(Html.HiddenFor(model => model.RemainingProduction))
                            @(Html.HiddenFor(model => model.RoyaltyRateID))
                            @(Html.HiddenFor(model => model.isForwarded))
                            @(Html.HiddenFor(model => model.MineralGradeName))
                            @(Html.HiddenFor(model => model.MineralNature))
                            @(Html.HiddenFor(model => model.GeneratedBy))
                            @(Html.HiddenFor(model => model.GeneratedDesignation))
                            @(Html.HiddenFor(model => model.IsWalletAdjusted))
                            @(Html.HiddenFor(model => model.CheckoutStatus))
                            <div class="row">
                                <div class="col-lg-6 col-md-12 col-sm-12">
                                    <h5 class="text-brown font-weight-bold mt-0">New Application</h5>
                                    <div class="row">
                                        <div class="col-lg-12 col-md-12 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Name of Lessee </label>
                                            @(Html.TextBoxFor(model => model.LesseeName, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>
                                        <div class="col-lg-12 col-md-12 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Address</label>
                                            @(Html.TextBoxFor(model => model.LesseeAddress, new { @class = "form-control form-group", @readonly = "readonly" }))

                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Grant Order No.</label>
                                            @(Html.TextBoxFor(model => model.GrantOrderNo, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Grant Order Date </label>
                                            @(Html.TextBoxFor(model => model.DateOfGrant, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>


                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Period of Lease</label>
                                            @(Html.TextBoxFor(model => model.PeriodOfLease, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Village</label>
                                            @(Html.TextBoxFor(model => model.Village, new { @class = "form-control form-group", @readonly = "readonly" }))
                                            @(Html.HiddenFor(model => model.VillageId))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Panchayat</label>
                                            @(Html.TextBoxFor(model => model.Panchayat, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Tehsil</label>
                                            @(Html.TextBoxFor(model => model.Tehsil, new { @class = "form-control form-group", @readonly = "readonly" }))
                                            @(Html.HiddenFor(model => model.TehsilId))
                                        </div>


                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Police Station</label>
                                            @(Html.TextBoxFor(model => model.PoliceStation, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>

                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">District</label>
                                            @(Html.TextBoxFor(model => model.District, new { @class = "form-control form-group", @readonly = "readonly" }))
                                            @(Html.HiddenFor(model => model.DistrictId))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Mineral Name</label>
                                            @(Html.TextBoxFor(model => model.MineralName, new { @class = "form-control form-group", @readonly = "readonly" }))
                                            @(Html.HiddenFor(model => model.MineralId))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12 form-group">
                                            <label class="col-form-label font-weight-bolder">Mineral Form<span class="text-danger">*</span></label>
                                            @Html.DropDownListFor(model => model.MineralNatureId, ViewBag.ViewMineralNatureList as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control form-group", autofocus = "autofocus", required = "required" })
                                            @(Html.HiddenFor(model => model.MineralNatureId))

                                        </div>

                                        <div class="col-lg-6 col-md-6 col-sm-12 form-group">
                                            <label class="col-form-label font-weight-bolder">Mineral Grade <span class="text-danger">*</span></label>
                                            @Html.DropDownListFor(model => model.MineralGradeId, ViewBag.ViewMineralGrade as IEnumerable<SelectListItem>, "--Select--", new { @class = "form-control form-group", autofocus = "autofocus", required = "required" })
                                            @(Html.HiddenFor(model => model.MineralGradeId))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12 form-group bauxite">
                                            <label class="col-form-label font-weight-bolder">Alumina Content Percent (Do not Use % Symbol)</label>
                                            @(Html.TextBoxFor(model => model.AluminaContent, new { @class = "form-control form-group", onkeypress = "return isNumberKey(event,this)", @maxlength = "10", @onblur = "txtQuantityChange();" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12 form-group tin">
                                            <label class="col-form-label font-weight-bolder">Tin Content Percent (Do not Use % Symbol)</label>
                                            @(Html.TextBoxFor(model => model.TinContent, new { @class = "form-control form-group", onkeypress = "return isNumberKey(event,this)", @maxlength = "10", @onblur = "txtQuantityChange();" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Quantity<small><i class="fas fa-rupee-sign ml-1"></i></small><span class="text-danger">*</span></label>
                                            @(Html.TextBoxFor(model => model.ProposedQty, new { @class = "form-control form-group", @onblur = "txtQuantityChange();" }))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Unit</label>
                                            @(Html.TextBoxFor(model => model.UnitName, new { @class = "form-control form-group", @readonly = "readonly" }))
                                            @(Html.HiddenFor(model => model.UnitId))
                                        </div>
                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Royalty Rate</label>
                                            @(Html.TextBoxFor(model => model.RoyaltyRate, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>

                                        <div class="col-lg-6 col-md-6 col-sm-12">
                                            <label class="col-form-label font-weight-bolder">Total Payable Amount<small><i class="icon-rupee-sign-solid ml-1"></i></small></label>
                                            @(Html.TextBoxFor(model => model.TotalPayableAmount, new { @class = "form-control form-group", @readonly = "readonly" }))
                                        </div>
                                    </div>
                                    <!--<div class="row">
                    <div class="col-sm-12">
                        <a class="btn btn-dark " data-toggle="modal" data-target="#viewcalculation">View Calculation</a>



                        @if (Model == null || Model.BulkPermitId == null || Model.BulkPermitId < 1)
                        {
                            <input type="button" onclick="return onSubmit();" id="btnSave" value="Save" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                            <input type="button" title="Make Payment" onclick="return OnPayment();" value="Make Payment" id="btnPayment" class="btn btn-primary btn-md ml-0 waves-effect waves-light" />
                            @*<input type="button" title="Make Payment" data-target="#mi-modal" data-toggle="modal" value="Make Payment" id="btnPayment" class="btn btn-primary btn-md ml-0 waves-effect waves-light" />*@
                        <!
                        else
                        {

                            <input type="button" id="btnEdit" value="Update" onclick="return onSubmit();" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                            <input type="button" title="Make Payment" onclick="return OnPayment();" value="Make Payment" id="btnPayment1" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                            <input type="submit" onclick="return onPrivewDownload();" id="btnForwardToDDDMO1" value="Download Draft Application" name="cmdPreview" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                        }
                    </div>
                </div>-->
                                </div>
                                <div class="col-lg-6 col-md-12 col-sm-12">
                                    <h5 class="text-brown font-weight-bold mt-0">Details</h5>
                                    <div class="bg-light p-2 shadow-sm">
                                        <div class="row">
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">EC Approved Qty + Opening Stock</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.TotalECApprovedQty, @Model.TotalECApprovedQty))
                                                        @*<label class="form-control-plaintext"><span class="colon">:</span>2000000.000</label>*@
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">Mining Plan Qty</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @Html.LabelFor(x => x.TotalMiningProductionQty, @Model.TotalMiningProductionQty.ToString())
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">Lease Validity</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.Label(@Model.MPValidity))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By Road</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.RoadDispatch, @Model.RoadDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By Road-Rail</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.RoadRailDispatch, @Model.RoadRailDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By Inside Railway Siding</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.InsideRailwaySidingDispatch, @Model.InsideRailwaySidingDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By Conveyor Belt</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.ConveyorBeltDispatch, @Model.ConveyorBeltDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By MGR/Own Wagon</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.MGROWNWagonDispatch, @Model.MGROWNWagonDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By End use plant inside the lease area</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.EndUsePlantinsIdetheLeaseAreaDispatch, @Model.EndUsePlantinsIdetheLeaseAreaDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">By Ropeway</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.RopewayDispatch, @Model.RopewayDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">Total Dispatched (e-Pass)</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.UserTotalDispatch, @Model.UserTotalDispatch))
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-12 col-md-12 col-sm-12">
                                                <div class="row">
                                                    <label class="col-sm-7 col-form-label font-weight-bolder">Total Dispatched</label>
                                                    <div class="col-sm-5">
                                                        <span class="colon">:</span>
                                                        @(Html.LabelFor(x => x.TillDateDispatched, @Model.TillDateDispatched))
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col-sm-12">
                                    <a class="btn btn-dark " data-toggle="modal" data-target="#viewcalculation">View Calculation</a>



                                    @if (Model == null || Model.BulkPermitId == null || Model.BulkPermitId < 1)
                                    {
                                        <input type="button" onclick="return onSubmit();" id="btnSave" value="Save" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                                        <input type="button" title="Make Payment" onclick="return OnPayment();" value="Make Payment" id="btnPayment" class="btn btn-primary btn-md ml-0 waves-effect waves-light" />
                                        @*<input type="button" title="Make Payment" data-target="#mi-modal" data-toggle="modal" value="Make Payment" id="btnPayment" class="btn btn-primary btn-md ml-0 waves-effect waves-light" />*@
                                    }
                                    else
                                    {

                                        <input type="button" id="btnEdit" value="Update" onclick="return onSubmit();" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                                        <input type="button" title="Make Payment" onclick="return OnPayment();" value="Make Payment" id="btnPayment1" class="btn btn-primary btn-md ml-0 waves-effect waves-light" />
                                        <input type="submit" onclick="return onPrivewDownload();" id="btnForwardToDDDMO1" value="Download Draft Application" name="cmdPreview" class="btn btn-success btn-md ml-0 waves-effect waves-light" />
                                    }
                                </div>
                            </div>
                        }

                    </div>
                </section>
            </div>
        </div>
    </div>
    <!-- MAIN CONTENT AREA ENDS -->
</section>


<div class="modal fade" id="viewcalculation">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title m-0">View Calculation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="row col-md-12">
                    <h6 class="w-100">Mines Details</h6>

                    <div class="mb-3">
                        <span class="font-weight-bold">Auction Type : </span><small>@ViewBag.Auct =></small>
                        <span class="font-weight-bold">Lease Extend : </span><small>@ViewBag.Leaseext =></small>
                        <span class="font-weight-bold">Captive : </span><small>@ViewBag.capt =></small>
                        <span class="font-weight-bold">Grant Date : </span><small>@ViewBag.Mlgrd</small>
                    </div>
                    <table id="PaymentTable" class="table table-bordered"></table>
                </div>
            </div>
        </div>
        
    </div>

</div>

@(Html.HiddenFor(model => model.PaymentDetails))
<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="mi-modal">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Do you want to adjust your e-wallet amount with this e-permit payment ?</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="modal-btn-si">Yes</button>
                <button type="button" class="btn btn-primary" id="modal-btn-no">No</button>
            </div>
        </div>
    </div>
</div>

<script>
    indicateMe = "yes"
    backMe = "yes"
    $(document).ready(function () {
        loadNavigation('Add', 'glhelpdesk', 'plraiseticket', 'tl', 'E-Permit', 'Apply e-permit', ' ');
        $('.datetime').datetimepicker({
            format: "DD/MM/YYYY"
        }).keydown(false);
    });
</script>
@{if (!string.IsNullOrEmpty(ViewBag.Acknowledgement) && Convert.ToString(ViewBag.Acknowledgement) == "1")
    {
    <script>
            swal("", 'Your application has been saved successfully in Khanij Online System.', "success");
        /**/
       // alert("Your application has been saved successfully in Khanij Online System.");
    </script>
    }
    else if (Convert.ToString(ViewBag.Acknowledgement) == "2")
    {
        <script>
            swal("", 'Application Failed !', "error");
           // alert("Application Failed !");
        </script>
    }
    else if (Convert.ToString(ViewBag.Acknowledgement) == "3")
    {
        <script>
            swal("", 'Required Fields are empty!', "error");
            //alert("Required Fields are empty!");
        </script>
    }
}

@{if (TempData["AlertMsg"] != null)
    {
    <script>
        $("#btnSave").attr("disabled", "disabled");
        $("#btnEdit").attr("disabled", "disabled");
            $("#btnForwardToDDDMO").attr("disabled", "disabled");
            swal("", '@TempData["AlertMsg"]', "warning");
    </script>
    }
}
<script>

    function GetMineralGradeId() {

        if ($('#MineralNatureId').val() == "2") { //  For use in alumina and aluminium metal extraction
            $(".bauxite").show();
        }
        else {
            $(".bauxite").hide();
        }

        return {
            MineralNatureId: $("#MineralNatureId").val()
        };
    }

    function RoyaltyCheckAmount() {

        $("#RoyaltyRateID").val(0);
        $("#RoyaltyRate").val(0);
        $("#TotalPayableAmount").val(0);
        $("#PayableRoyalty").val(0);



        txtQuantityChange();
    }
    $(document).ready(function () {
        $("#MineralGradeId").change(function () {

            $("#RoyaltyRateID").val(0);
            $("#RoyaltyRate").val(0);
            $("#TotalPayableAmount").val(0);
            $("#PayableRoyalty").val(0);
            txtQuantityChange();
        });
    });

    $(document).ready(function () {
        var Mineral = $('#MineralName').val();
        $(".bauxite").hide();
        $(".tin").hide();
        if ($('#MineralNatureId').val() == "2" && Mineral == 'Bauxite') { //  For use in alumina and aluminium metal extraction
            $(".bauxite").show();
        }
        if (Mineral == 'Tin Ore') {
            $(".tin").show();
        }

        var vv = $("#BulkPermitId").val();

        if (vv != null && vv > 0) {
            txtQuantityChange();
        }
    });

    if ($("#BulkPermitId").val() > 0) {
        $("#btnSave").attr("disabled", "disabled");
    }
    else {
        $("#btnEdit").attr("disabled", "disabled");
    }

    function txtQuantityChange() {

        var BulkPermitId = $('#BulkPermitId').val();
        var MineralNatureId = $('#MineralNatureId').val();
        var Mineral = $('#MineralId').val();
        var MineralGrade = $('#MineralGradeId').val();
        var RoyaltyRate = $("#RoyaltyRate").val();

        var AluminaContent = $("#AluminaContent").val();
        var TinContent = $("#TinContent").val();

        $.ajax({
            url: '@Url.Action("GradeWiseCheckECQTY", "Lessee")',
            type: "GET",
            //data: '{MineralGradeId : "' + MineralGrade + '" }',
            data: { MineralGradeId: MineralGrade },
            success: function (data) {

                if (data != "" && data != 0) {
                    $("#RemainingProduction").val(parseFloat(data));
                    var TotalQuantity = parseFloat($("#ProposedQty").val());
                    var MiningProduction = parseFloat($("#RemainingProduction").val());
                    if (TotalQuantity > MiningProduction) {
                        $("#ProposedQty").val(0).change();
                        $("#PayableRoyalty").val(0).change();
                        alert("Your Production Capacity Balance is : " + MiningProduction);
                        return false;
                    }
                    else {
                        var P_BulkPermitId = $('#BulkPermitId').val();
                        var P_MineralNatureId = $('#MineralNatureId').val();
                        var P_Mineral = $('#MineralId').val();
                        var P_MineralGrade = $('#MineralGradeId').val();
                        var P_RoyaltyRate = $("#RoyaltyRate").val();

                        var P_AluminaContent = $("#AluminaContent").val();
                        var P_TinContent = $("#TinContent").val();

                        var AppQuantity = 0;
                        if (AppQuantity == "" || AppQuantity == null) { AppQuantity = "0" }
                        $.ajax({
                            type: "POST",
                            url: "/Permit/Lessee/RevisedCalculation",
                          //  contentType: "application/json; charset=utf-8",
                            data: { 'MineralNatureId': P_MineralNatureId, 'MineralGradeId': P_MineralGrade, MineralId: P_Mineral, Quantity: TotalQuantity, RoyaltyRate: P_RoyaltyRate, BulkPermitId: P_BulkPermitId, AluminaContent: P_AluminaContent, TinContent: P_TinContent},

                            dataType: "json",

                            success: function (result) {

                                if (result != null) {
                                    resultdata = result;
                                    var isFound = 0;
                                    var isOffline = false;
                                    $('#PaymentTable').empty();
                                    $('#PaymentTable').append('<tr><th width="160px"><label style="color: red;font-size: 16px;margin-bottom: 0px;">Payable</label></th><th ><label style="margin-bottom: 0px;">Payment Amount <small><i class="icon-rupee-sign-solid ml-1"></i></small></label></th><th><label style="margin-bottom: 0px;">Calculation</label></th><th><label style="margin-bottom: 0px;">Head of Account</label></th></tr>');
                                    $.each(result, function (i) {
                                        isFound = 1;
                                        if (result[i].IsApplicable == false) {
                                            if (isOffline == false) {
                                                $('#PaymentTable').append('<tr><td style="width:100%;" colspan="4"><label style="color: red;font-size: 16px;font-weight: 700;margin-bottom: 0px;">Shall be paid separately</label></td></tr>');
                                                isOffline = true;
                                            }
                                        }
                                        if (i == 0) {

                                            $("#RoyaltyRateID").val(result[0].PaymentTypeID);
                                            $("#RoyaltyRate").val(result[0].CalValue);
                                            $("#TotalPayableAmount").val(result[0].TotalPayableAmount);
                                            $("#PayableRoyalty").val(result[0].MappingValue);
                                            var vvRoyalty = result[i].PaymentType;

                                            if (vvRoyalty == "Payable Royalty") {
                                                vvRoyalty = "Royalty";
                                            }


                                            if (result[i].CalType == "Rs / Unit") {
                                                $('#PaymentTable').append('<tr><td><label>' + vvRoyalty + '</label></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].MappingValue + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].RoyaltyRate + ' ' + result[i].CalType + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].HeadAccount + '"></td></tr>');
                                            }
                                            else if (result[i].CalType == "Fixed") {
                                                $('#PaymentTable').append('<tr><td ><label>' + vvRoyalty + '</label></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].MappingValue + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].RoyaltyRate + ' ' + result[i].CalType + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].HeadAccount + '"></td></tr>');
                                            }
                                            else {
                                                $('#PaymentTable').append('<tr><td style="width:35%;"><label>' + vvRoyalty + '</label></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].MappingValue + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].RoyaltyRate + ' ' + result[i].CalType + ' of ' + result[i].BasisRate + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].HeadAccount + '"></td></tr>');
                                            }
                                        }
                                        else {
                                            $('#PaymentTable').append('<tr><td ><label>' + result[i].PaymentType + '</label></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].MappingValue + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].CalValue + ' ' + result[i].CalType + '"></td><td ><input class="form-control" readonly="readonly" type="text" value="' + result[i].HeadAccount + '"></td></tr>');
                                        }
                                    })
                                }
                            }
                        });
                    }
                }
                else {
                    $("#ProposedQty").val(0).change();
                    $("#PayableRoyalty").val(0).change();
                    swal("", "Your Production Capacity Balance is 0.", "warning");
                    return false;
                }
            },
            error: function (data) {
            }
        });



    }

    var myWindow = $("#window"), undo = $("#Calculation");
    var resultdata;
    var win;
    myWindow.hide();

    undo.click(function () {
        try {
            txtQuantityChange();
        }
        catch (e) {

        }
        if (!win) {
            win.center().open();
        } else {
            win.open();
        }
    });

    function onClose() {
    }

    //$(document).ready(function () {
    //    win = myWindow.kendoWindow({
    //        width: "50%",
    //        left: "28%",
    //        title: "Calculation",
    //        visible: false,
    //        scrollable: false,
    //        modal: true,
    //        actions: ["Close"],
    //        close: onClose
    //    }).data("kendoWindow").center();
    //});

    $('#ProposedQty').keypress(function (e) {
        if (isNaN(this.value + String.fromCharCode(event.keyCode))) return false;
    });

    var modalConfirm = function (callback) {
        //$("#btnPayment").on("click", function () {

        //    $("#mi-modal").modal('show');

        //});
        //$("#btnPayment1").on("click", function () {
        //    $("#mi-modal").modal('show');

        //});
        $("#modal-btn-si").on("click", function () {
            callback(true);
            $("#mi-modal").modal('hide');
        });
        $("#modal-btn-no").on("click", function () {
            callback(false);
            $("#mi-modal").modal('hide');
        });
    };

    modalConfirm(function (confirm) {
        debugger;
        if (confirm) {
            //Acciones si el usuario confirma
            $("#IsWalletAdjusted").val(1).change();
            OnPayment();
        } else {
            $("#IsWalletAdjusted").val(0).change();
            OnPayment();
            //Acciones si el usuario no confirma
        }
    });

    function checkFields() {

        txtQuantityChange();
        var vv = $("#ProposedQty").val();
        var TotalQuantity = parseFloat($("#ProposedQty").val());
        var MiningProduction = parseFloat($("#RemainingProduction").val());
        var vvPP = $("#TotalPayableAmount").val();
        var vvroyalty = $("#RoyaltyRate").val();


        var MF = $("#MineralNatureId").val();
        var MG = $("#MineralGradeId").val();
        //var MFName = $("#MineralNatureId").data("kendoDropDownList").text();
        var MFName = $("#MineralNatureId option:selected").text();
        var AluminaContent = $("#AluminaContent").val();
        var TinContent = $("#TinContent").val();
        var MineralName = $("#MineralName").val();


        if (MF == "" || MF == 0) {
            swal("", "Select Mineral Form", "warning");
            return;
        }
        else if (MG == "" || MG == 0) {
            swal("", "Select Mineral Grade", "warning");
            return;
        }
        if (vv == "" || TotalQuantity == 0) {
            swal("", "Enter Qty.", "warning");
            return false;
        }
        else if (MineralName == 'Tin Ore') {
            if (TinContent == "" || TinContent == 0) {
                swal("", "Enter Tin Content.", "warning");
                $("#TinContent").focus();
                return false;
            }
        }
        else if (MineralName == 'Bauxite') {
            if (MFName == "For use in alumina and aluminium metal extraction") {
                if (AluminaContent == "" || AluminaContent == 0) {
                    swal("", "Enter Alumina Content.", "warning");
                    $("#AluminaContent").focus();
                    return false;
                }
            }
        }
        else if (TotalQuantity > MiningProduction) {
            swal("", "Your Production Capacity Balance is : ", "warning");
            return false;
        }
        else if (vvPP == "" || parseFloat(vvPP) == 0) {
            swal("", "Royalty Rate is not defined for Selected Mineral Grade.Contact Competent Authority.", "warning");
            return false;
        }
        else if (vvroyalty == "" || parseFloat(vvroyalty) == 0) {
            swal("", "Royalty Rate is not defined for Selected Mineral Grade.Contact Competent Authority.", "warning");
            return false;
        }

        return true;
    }

    function onSubmit() {
        var vv = checkFields();
        if (vv == true) {

            swal({
                title: "Are you sure to save this application ?",
                icon: "warning",
                buttons: ["No", "Yes"],
            })
                .then((submit) => {
                    if (submit) {
                        $("#__EUAntiForgeryForm").submit();
                    }
                });

            //if (confirm("Are you sure to save this application ?")) {
            //    $("#__EUAntiForgeryForm").submit();
            //}
        }
        else {
            return false;
        }
    }

    function onPrivewDownload() {
        var vv = checkFields();
        if (vv == true) {
            $("#__EUAntiForgeryForm").submit();
        }
    }

    function OnPayment() {

        var vv = checkFields();
        if (vv == true) {



            //if (confirm("Click on 'OK' to continue with adjustment of your e-wallet amount with this e-permit payment. Click on 'Cancel' to Proceed further without Adjustment of e-wallet amount ? ")) {
            //    $("#IsWalletAdjusted").val(1).change();
            //}
            //else {
            //    $("#IsWalletAdjusted").val(0).change();
            //}

            swal({
                title: "Are you sure to make payment??",
                icon: "warning",
                buttons: ["No", "Yes"],
            })
                .then((submit) => {
                    if (submit) {
                        if ($("#BulkPermitId").val() == null || $("#BulkPermitId").val() != "") {
                            $("#isForwarded").val(1).change();
                        }
                        $("#__EUAntiForgeryForm").submit();
                    }
                });

            //if (confirm("Are you sure to make payment??")) {

            //    if ($("#BulkPermitId").val() == null || $("#BulkPermitId").val() != "") {
            //        $("#isForwarded").val(1).change();
            //    }
            //   /* $("#IsWalletAdjusted").val(0).change();*/
            //    $("#__EUAntiForgeryForm").submit();
            //}
        }
    }


    function isNumberKey(evt, obj) {

        var charCode = (evt.which) ? evt.which : event.keyCode
        var value = obj.value;
        var dotcontains = value.indexOf(".") != -1;
        if (dotcontains)
            if (charCode == 46) return false;
        if (charCode == 46) return true;
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }

    function ForwardRequest(e) {

        if (confirm("Are you sure you to forward this application to DD/DMO ?")) {

            var id = $("#BulkPermitId").val();
            var transactionalid = $("#TransactionalID").val();
            var emailid = $("#EmailId").val();
            var mobileno = $("#MobileNo").val();

            $.ajax({
                url: '@Url.Action("Forward_Request", "BulkPermit")',
                type: "POST",
                //send current record ID to the server
                data: { bulkPermitId: id, TransactionalId: transactionalid, EmailID: emailid, MobileNO: mobileno },
                success: function (data) {
                    if (data == 1) {
                        swal("", "Application has been forwarded successfully.", "success");
                    }
                    else {
                        swal("", "Request can't forwarded", "warning");
                    }
                    // OnRefreshGrid();
                },
                error: function (data) {
                    swal("", "Request can't forwarded", "warning");
                }
            });
            }
        }

        function EditApplicationDetails() {
            var PayableRoyalty = $("#PayableRoyalty").val();
            var TCS = $("#TCS").val();
            var Cess = $("#Cess").val();
            var eCess = $("#eCess").val();
            var DMF = $("#DMF").val();
            var NMET = $("#NMET").val();
            var TotalPayableAmount = $("#TotalPayableAmount").val();
            var ProposedQty = $("#ProposedQty").val();
            var BulkPermitId = $("#BulkPermitId").val();
            var MineralId = $("#MineralId").val();
            $.ajax({
                url: '@Url.Action("UpdateBulkPermitData", "BulkPermit")',
                type: "POST",
                //send current record ID to the server
                data: { bulkpermitid: BulkPermitId, mineralid: MineralId, ProposedQty: ProposedQty, payableroyalty: PayableRoyalty, tcs: TCS, cess: Cess, eCess: eCess, dmf: DMF, nmet: NMET, totalpayableamount: TotalPayableAmount },
                success: function (data) {
                    if (data.Data[0] == "1") {
                        swal("", "Application Updated Successfully", "success");
                    }
                    else {
                        swal("", "Application Not Updated Successfully !", "warning");
                    }
                }
            });

        }

</script>
<script>
    $(document).ready(function () {
        $("#MineralNatureId").change(function () {

            var NatureID = $('#MineralNatureId').val();
            if (NatureID == "") {
                NatureID = 0;
            }
            //alert(RoleTypeId.toString());
            $('#MineralGradeId').empty();
            var v = "";
            if (NatureID != 0) {

                $.ajax({
                    type: "POST",
                    url: "/Permit/Lessee/GetMineralGrade",
                    data: { 'NatureID': NatureID },
                    cache: false,
                    //contentType: "application/json",
                    datatype: "JSON",
                    success: function (SList) {
                        var opt = new Option('--Select--', 0);
                        $('#MineralGradeId').append(opt).selectpicker('refresh');
                        $.each(SList, function (i, item) {

                            // console.log(item);
                            var opt = new Option(item.MineralGrade, item.MineralGradeId);
                            $('#MineralGradeId').append(opt).selectpicker('refresh');
                            //$('#ddlUserName').append('<option value="' + item[" UserID"] + '"> ' + item["ApplicantName"] + ' </option>' );
                            // v += "<option value='" + item.userID.toString() + "'>" + item.applicantName + "</option>";
                            // alert(v);
                        });

                    }
                });
            }
            else {
                $('#MineralGradeId').val("");
                swal("", "Select Mineral Form", "warning");
            }

        });
        if ('@TempData["SuccMessage"]' != '' && '@TempData["SuccMessage"]' != null) {

    swal("",'@TempData["SuccMessage"]',"success");
    }
    });
</script>